from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from database import SessionLocal, AudioMessage, BotSettings, User, UserResponse
from datetime import datetime
import logging

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
ADMIN_IDS = [354786612, 740144550]

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤
WAITING_AUDIO, WAITING_TEXT, WAITING_PAIN_LEVEL, WAITING_HOUR, WAITING_MINUTE = range(5)

logger = logging.getLogger(__name__)

def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id in ADMIN_IDS

async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    keyboard = [
        [InlineKeyboardButton("üéµ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞—É–¥–∏–æ", callback_data="manage_audio")],
        [InlineKeyboardButton("‚è∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏", callback_data="manage_time")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="view_stats")],
        [InlineKeyboardButton("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data="manage_users")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = (
        "üîß *–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='Markdown')

async def handle_admin_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∫–Ω–æ–ø–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    query = update.callback_query
    await query.answer()
    
    if not is_admin(query.from_user.id):
        await query.edit_message_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
        return
    
    if query.data == "manage_audio":
        await show_audio_management(query, context)
    elif query.data == "manage_time":
        await show_time_settings(query, context)
    elif query.data == "view_stats":
        await show_statistics(query, context)
    elif query.data == "manage_users":
        await show_user_management(query, context)
    elif query.data.startswith("add_audio_"):
        pain_level = int(query.data.split("_")[-1])
        context.user_data['pain_level'] = pain_level
        await query.edit_message_text(
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É—Ä–æ–≤–Ω—è –±–æ–ª–∏ {pain_level}:"
        )
        return WAITING_AUDIO
    elif query.data.startswith("edit_audio_"):
        pain_level = int(query.data.split("_")[-1])
        await show_audio_edit_options(query, context, pain_level)
    elif query.data == "back_to_main":
        await show_main_admin_panel(query, context)
    elif query.data == "toggle_reminders":
        await toggle_reminders(query, context)
    elif query.data == "change_time":
        await change_reminder_time(query, context)
    elif query.data.startswith("delete_audio_"):
        pain_level = int(query.data.split("_")[-1])
        await delete_audio_message(query, context, pain_level)
    elif query.data.startswith("set_time_"):
        time_parts = query.data.split("_")[2:]
        hour, minute = int(time_parts[0]), int(time_parts[1])
        await set_reminder_time(query, context, hour, minute)

async def show_audio_management(query, context):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏—è–º–∏"""
    db = SessionLocal()
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∞—É–¥–∏–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è –±–æ–ª–∏
        audio_messages = db.query(AudioMessage).all()
        audio_by_level = {}
        for audio in audio_messages:
            audio_by_level[audio.pain_level] = audio
        
        keyboard = []
        for level in range(1, 6):
            if level in audio_by_level:
                text = f"‚úÖ –£—Ä–æ–≤–µ–Ω—å {level} (–µ—Å—Ç—å –∞—É–¥–∏–æ)"
                callback_data = f"edit_audio_{level}"
            else:
                text = f"‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–ª—è —É—Ä–æ–≤–Ω—è {level}"
                callback_data = f"add_audio_{level}"
            keyboard.append([InlineKeyboardButton(text, callback_data=callback_data)])
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = (
            "üéµ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏—è–º–∏*\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –±–æ–ª–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:"
        )
        
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    finally:
        db.close()

async def show_audio_edit_options(query, context, pain_level):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ–ø—Ü–∏–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è –±–æ–ª–∏"""
    keyboard = [
        [InlineKeyboardButton("üîÑ –ó–∞–º–µ–Ω–∏—Ç—å –∞—É–¥–∏–æ", callback_data=f"replace_audio_{pain_level}")],
        [InlineKeyboardButton("üìù –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", callback_data=f"edit_text_{pain_level}")],
        [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_audio_{pain_level}")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="manage_audio")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –∞—É–¥–∏–æ
    db = SessionLocal()
    try:
        audio = db.query(AudioMessage).filter(AudioMessage.pain_level == pain_level).first()
        text = f"üéµ *–ê—É–¥–∏–æ –¥–ª—è —É—Ä–æ–≤–Ω—è –±–æ–ª–∏ {pain_level}*\n\n"
        if audio:
            text += f"üìù –¢–µ–∫—Å—Ç: {audio.text_description or '–ù–µ –∑–∞–¥–∞–Ω'}\n"
            text += f"üìÖ –°–æ–∑–¥–∞–Ω–æ: {audio.created_at.strftime('%d.%m.%Y %H:%M')}"
        
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    finally:
        db.close()

async def show_time_settings(query, context):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    db = SessionLocal()
    try:
        hour_setting = db.query(BotSettings).filter(BotSettings.setting_name == 'reminder_hour').first()
        minute_setting = db.query(BotSettings).filter(BotSettings.setting_name == 'reminder_minute').first()
        enabled_setting = db.query(BotSettings).filter(BotSettings.setting_name == 'reminder_enabled').first()
        
        current_hour = hour_setting.setting_value if hour_setting else "10"
        current_minute = minute_setting.setting_value if minute_setting else "0"
        is_enabled = enabled_setting.setting_value == 'true' if enabled_setting else True
        
        keyboard = [
            [InlineKeyboardButton("‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è", callback_data="change_time")],
            [InlineKeyboardButton(
                f"{'üî¥ –û—Ç–∫–ª—é—á–∏—Ç—å' if is_enabled else 'üü¢ –í–∫–ª—é—á–∏—Ç—å'} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", 
                callback_data="toggle_reminders"
            )],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        status = "üü¢ –í–∫–ª—é—á–µ–Ω—ã" if is_enabled else "üî¥ –û—Ç–∫–ª—é—á–µ–Ω—ã"
        text = (
            f"‚è∞ *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π*\n\n"
            f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {current_hour}:{current_minute:0>2}\n"
            f"–°—Ç–∞—Ç—É—Å: {status}"
        )
        
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    finally:
        db.close()

async def show_statistics(query, context):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞"""
    db = SessionLocal()
    try:
        total_users = db.query(User).count()
        active_users = db.query(User).filter(User.is_active == True).count()
        total_responses = db.query(UserResponse).count()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —É—Ä–æ–≤–Ω—è–º –±–æ–ª–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
        from datetime import timedelta
        thirty_days_ago = datetime.utcnow() - timedelta(days=30)
        recent_responses = db.query(UserResponse).filter(UserResponse.response_date >= thirty_days_ago).all()
        
        pain_stats = {1: 0, 2: 0, 3: 0, 4: 0, 5: 0}
        for response in recent_responses:
            pain_stats[response.pain_rating] += 1
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = (
            f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞*\n\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
            f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_users}\n"
            f"üí¨ –í—Å–µ–≥–æ –æ—Ç–≤–µ—Ç–æ–≤: {total_responses}\n\n"
            f"üìà *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ–ª–∏ (30 –¥–Ω–µ–π):*\n"
        )
        
        for level, count in pain_stats.items():
            text += f"–£—Ä–æ–≤–µ–Ω—å {level}: {count} –æ—Ç–≤–µ—Ç–æ–≤\n"
        
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    finally:
        db.close()

async def show_user_management(query, context):
    """–ü–æ–∫–∞–∑–∞—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    db = SessionLocal()
    try:
        total_users = db.query(User).count()
        active_users = db.query(User).filter(User.is_active == True).count()
        
        keyboard = [
            [InlineKeyboardButton("üìù –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="list_users")],
            [InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="broadcast")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = (
            f"üë• *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏*\n\n"
            f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
            f"–ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_users}"
        )
        
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')
    finally:
        db.close()

async def receive_audio(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if not is_admin(update.effective_user.id):
        return ConversationHandler.END
    
    if 'pain_level' not in context.user_data:
        await update.message.reply_text("–û—à–∏–±–∫–∞: —É—Ä–æ–≤–µ–Ω—å –±–æ–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω.")
        return ConversationHandler.END
    
    audio = update.message.audio or update.message.voice
    if not audio:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return WAITING_AUDIO
    
    context.user_data['audio_file_id'] = audio.file_id
    await update.message.reply_text(
        "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –∞—É–¥–∏–æ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):"
    )
    return WAITING_TEXT

async def receive_text_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –∞—É–¥–∏–æ"""
    if not is_admin(update.effective_user.id):
        return ConversationHandler.END
    
    text_description = None if update.message.text == '/skip' else update.message.text
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    db = SessionLocal()
    try:
        pain_level = context.user_data['pain_level']
        audio_file_id = context.user_data['audio_file_id']
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –∞—É–¥–∏–æ –¥–ª—è —ç—Ç–æ–≥–æ —É—Ä–æ–≤–Ω—è –±–æ–ª–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
        old_audio = db.query(AudioMessage).filter(AudioMessage.pain_level == pain_level).first()
        if old_audio:
            db.delete(old_audio)
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ
        new_audio = AudioMessage(
            pain_level=pain_level,
            file_id=audio_file_id,
            text_description=text_description,
            created_by_admin=update.effective_user.id
        )
        db.add(new_audio)
        db.commit()
        
        await update.message.reply_text(
            f"‚úÖ –ê—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É—Ä–æ–≤–Ω—è –±–æ–ª–∏ {pain_level} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!"
        )
    finally:
        db.close()
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context.user_data.clear()
    return ConversationHandler.END

async def cancel_admin_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    context.user_data.clear()
    await update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END

async def show_main_admin_panel(query, context):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω—É—é –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    keyboard = [
        [InlineKeyboardButton("üéµ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞—É–¥–∏–æ", callback_data="manage_audio")],
        [InlineKeyboardButton("‚è∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏", callback_data="manage_time")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="view_stats")],
        [InlineKeyboardButton("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data="manage_users")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = (
        "üîß *–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')

async def toggle_reminders(query, context):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–∏—è/–æ—Ç–∫–ª—é—á–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    db = SessionLocal()
    try:
        enabled_setting = db.query(BotSettings).filter(BotSettings.setting_name == 'reminder_enabled').first()
        
        if enabled_setting:
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            new_value = 'false' if enabled_setting.setting_value == 'true' else 'true'
            enabled_setting.setting_value = new_value
            enabled_setting.updated_by_admin = query.from_user.id
            enabled_setting.updated_at = datetime.utcnow()
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É
            new_setting = BotSettings(
                setting_name='reminder_enabled',
                setting_value='false',
                updated_by_admin=query.from_user.id
            )
            db.add(new_setting)
            new_value = 'false'
        
        db.commit()
        
        status_text = "–≤–∫–ª—é—á–µ–Ω—ã" if new_value == 'true' else "–æ—Ç–∫–ª—é—á–µ–Ω—ã"
        await query.answer(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è {status_text}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        hour_setting = db.query(BotSettings).filter(BotSettings.setting_name == 'reminder_hour').first()
        minute_setting = db.query(BotSettings).filter(BotSettings.setting_name == 'reminder_minute').first()
        
        hour = int(hour_setting.setting_value) if hour_setting else 10
        minute = int(minute_setting.setting_value) if minute_setting else 0
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        if hasattr(context.application, 'spina_bot'):
            context.application.spina_bot.update_scheduler(hour, minute, new_value == 'true')
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
        await show_time_settings(query, context)
        
    finally:
        db.close()

async def change_reminder_time(query, context):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    keyboard = [
        [InlineKeyboardButton("09:00", callback_data="set_time_9_0")],
        [InlineKeyboardButton("10:00", callback_data="set_time_10_0")],
        [InlineKeyboardButton("11:00", callback_data="set_time_11_0")],
        [InlineKeyboardButton("12:00", callback_data="set_time_12_0")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="manage_time")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = (
        "‚è∞ *–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:"
    )
    
    await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='Markdown')

async def delete_audio_message(query, context, pain_level):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∞—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏—è"""
    db = SessionLocal()
    try:
        audio = db.query(AudioMessage).filter(AudioMessage.pain_level == pain_level).first()
        if audio:
            db.delete(audio)
            db.commit()
            await query.answer("–ê—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ")
        else:
            await query.answer("–ê—É–¥–∏–æ—Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –∞—É–¥–∏–æ
        await show_audio_management(query, context)
    finally:
        db.close()

async def set_reminder_time(query, context, hour, minute):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    db = SessionLocal()
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
        hour_setting = db.query(BotSettings).filter(BotSettings.setting_name == 'reminder_hour').first()
        minute_setting = db.query(BotSettings).filter(BotSettings.setting_name == 'reminder_minute').first()
        
        if hour_setting:
            hour_setting.setting_value = str(hour)
            hour_setting.updated_by_admin = query.from_user.id
            hour_setting.updated_at = datetime.utcnow()
        else:
            hour_setting = BotSettings(
                setting_name='reminder_hour',
                setting_value=str(hour),
                updated_by_admin=query.from_user.id
            )
            db.add(hour_setting)
        
        if minute_setting:
            minute_setting.setting_value = str(minute)
            minute_setting.updated_by_admin = query.from_user.id
            minute_setting.updated_at = datetime.utcnow()
        else:
            minute_setting = BotSettings(
                setting_name='reminder_minute',
                setting_value=str(minute),
                updated_by_admin=query.from_user.id
            )
            db.add(minute_setting)
        
        db.commit()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        enabled_setting = db.query(BotSettings).filter(BotSettings.setting_name == 'reminder_enabled').first()
        is_enabled = enabled_setting.setting_value == 'true' if enabled_setting else True
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        if hasattr(context.application, 'spina_bot'):
            context.application.spina_bot.update_scheduler(hour, minute, is_enabled)
        
        await query.answer(f"–í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {hour:02d}:{minute:02d}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
        await show_time_settings(query, context)
        
    finally:
        db.close() 